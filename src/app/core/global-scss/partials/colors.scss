/*----------------------------------------------------------------*/
/*  Colors
/*----------------------------------------------------------------*/

// Black text
.black-fg,
.black-text {
    color: rgba(0, 0, 0, 0.87) !important;

    &.secondary-text,
    .secondary-text,
    &.icon,
    .icon {
        color: rgba(0, 0, 0, 0.54) !important;
    }

    &.hint-text,
    .hint-text,
    &.disabled-text,
    .disabled-text {
        color: rgba(0, 0, 0, 0.26) !important;
    }

    &.divider,
    .divider,
    &.faint-text,
    .faint-text {
        color: rgba(0, 0, 0, 0.12) !important;
    }
}

// White text
.white-fg,
.white-text {
    color: rgb(255, 255, 255) !important;

    &.secondary-text,
    .secondary-text,
    &.icon,
    .icon {
        color: rgba(255, 255, 255, 0.70) !important;
    }

    &.hint-text,
    .hint-text,
    &.disabled-text,
    .disabled-text {
        color: rgba(255, 255, 255, 0.30) !important;
    }

    &.divider,
    .divider,
    &.faint-text,
    .faint-text {
        color: rgba(255, 255, 255, 0.12) !important;
    }

    // Angular material element color override
    md-icon {
        color: #FFFFFF;
    }

    md-progress-linear {

        .md-container {
            background: rgba(255, 255, 255, 0.3);
        }

        .md-bar {
            background: rgba(255, 255, 255, 0.7);
        }
    }
}

@function getContrastColor($options, $hue) {
    @if (map_has_key($options, 'contrastColors')) {
        $contrastColors: map-get($options, 'contrastColors');

        @if (map_has_key($contrastColors, $hue)) {
            @return map-get($contrastColor, map-get($contrastColors, $hue));
        } @else {
            @return map-get($contrastColor, map-get($contrastColors, 'default'));
        }

    }
    @return black;
}

// Material colors with all available hue values
@each $colorName, $options in $materialColorsMap {

    @each $hue, $hexValue in map-get($options, 'colorMap') {

        .#{$colorName}-#{$hue}-bg {
            background-color: $hexValue !important;
        }

        .md-#{$colorName}-#{$hue}-bg {
            background-color: $hexValue !important;
            color: getContrastColor($options, $hue);
        }

        .#{$colorName}-#{$hue}-fg {
            color: $hexValue !important;
        }

        .border-#{$colorName}-#{$hue} {
            border-color: $hexValue !important;
        }

        .border-top-#{$colorName}-#{$hue} {
            border-top-color: $hexValue !important;
        }

        .border-right-#{$colorName}-#{$hue} {
            border-right-color: $hexValue !important;
        }

        .border-bottom-#{$colorName}-#{$hue} {
            border-bottom-color: $hexValue !important;
        }

        .border-left-#{$colorName}-#{$hue} {
            border-left-color: $hexValue !important;
        }

        @if ($hue == '500') {

            .md-#{$colorName}-bg {
                background-color: $hexValue !important;
                color: getContrastColor($options, $hue);
            }

            .#{$colorName}-bg {
                background-color: $hexValue !important;
            }

            .#{$colorName}-fg {
                color: $hexValue !important;
            }

            .border-#{$colorName} {
                border-color: $hexValue !important;
            }

            .border-top-#{$colorName} {
                border-top-color: $hexValue !important;
            }

            .border-right-#{$colorName} {
                border-right-color: $hexValue !important;
            }

            .border-bottom-#{$colorName} {
                border-bottom-color: $hexValue !important;
            }

            .border-left-#{$colorName} {
                border-left-color: $hexValue !important;
            }
        }
    }
}

// Function for getting material color and their hue values in scss
@function material-color($color, $hue: '500') {

    @if (map_has_key($materialColorsMap, $color)) {
        $selectedColor: map_get($materialColorsMap, $color);
        @if (map_has_key(map_get($selectedColor, 'colorMap'), $hue)) {
            @return map_get(map_get($selectedColor, 'colorMap'), $hue);
        } @else {
            @error "'#{$hue}' is not a valid hue value for '#{$color}'!";
        }
    } @else {
        @error "'#{$color}' is not a valid Material Design color!";
    }
}